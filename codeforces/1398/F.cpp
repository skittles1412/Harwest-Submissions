/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */


#pragma GCC optimize("Ofast")

#include <bits/stdc++.h>

using namespace std;

typedef vector<int> vi;

#define f0r(i, n) for(int i = 0; i<n; i++)
#define f0rr(i, n) for(int i = n-1; i>=0; i--)

#define pb push_back
#define s second

class FControversialRounds {
public:
	vi next, cnt;
	int n, cur;

	int count(int ind) {
		if(ind==n) {
			return 0;
		}else if(cnt[ind]>=cur) {
			return 1+count(ind+cur);
		}
		return count(findNext(ind));
	}

	int findNext(int ind) {
		if(ind==n) {
			return n;
		}else if(cnt[next[ind]]>=cur) {
			return next[ind];
		}
		return next[ind] = findNext(next[ind]);
	}

	void solve(istream &in, ostream &out) {
		in>>n;
		string s;
		in>>s;
		vector<array<int, 2>> ways = vector<array<int, 2>>(n+1);
		f0r(i, n) {
			next.pb(i+1);
		}
		cnt = vi(n);
		f0rr(i, n) {
			if(s[i]=='0'||s[i]=='?') {
				ways[i][0] = 1+ways[i+1][0];
			}
			if(s[i]=='1'||s[i]=='?') {
				ways[i][1] = 1+ways[i+1][1];
			}
			cnt[i] = max(ways[i][0], ways[i][1]);
		}
		for(cur = 1; cur<=n; cur++) {
			out<<count(0)<<" ";
		}
		out<<"\n";
	}
};


int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	FControversialRounds solver;
	std::istream &in(std::cin);
	std::ostream &out(std::cout);
	solver.solve(in, out);
	return 0;
}
